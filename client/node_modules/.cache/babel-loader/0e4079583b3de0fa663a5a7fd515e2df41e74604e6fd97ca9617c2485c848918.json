{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Rohit\\\\Downloads\\\\wellnest-platform\\\\client\\\\src\\\\core\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function useAuth() {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem(\"wellnest_user\");\n    const storedToken = localStorage.getItem(\"wellnest_token\");\n    if (storedUser && storedToken) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n  const login = userData => {\n    setUser(userData);\n    localStorage.setItem(\"wellnest_user\", JSON.stringify(userData));\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"wellnest_user\");\n    localStorage.removeItem(\"wellnest_token\");\n  };\n  const isAuthenticated = !!user;\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n}\n_s2(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","context","Error","AuthProvider","children","user","setUser","storedUser","localStorage","getItem","storedToken","JSON","parse","login","userData","setItem","stringify","logout","removeItem","isAuthenticated","Provider","value","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Rohit/Downloads/wellnest-platform/client/src/core/AuthContext.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\n\ninterface User {\n  id: string\n  name: string\n  email: string\n  phone: string\n}\n\ninterface AuthContextType {\n  user: User | null\n  login: (userData: User) => void\n  logout: () => void\n  isAuthenticated: boolean\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\ninterface AuthProviderProps {\n  children: ReactNode\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null)\n\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem(\"wellnest_user\")\n    const storedToken = localStorage.getItem(\"wellnest_token\")\n\n    if (storedUser && storedToken) {\n      setUser(JSON.parse(storedUser))\n    }\n  }, [])\n\n  const login = (userData: User) => {\n    setUser(userData)\n    localStorage.setItem(\"wellnest_user\", JSON.stringify(userData))\n  }\n\n  const logout = () => {\n    setUser(null)\n    localStorage.removeItem(\"wellnest_user\")\n    localStorage.removeItem(\"wellnest_token\")\n  }\n\n  const isAuthenticated = !!user\n\n  return <AuthContext.Provider value={{ user, login, logout, isAuthenticated }}>{children}</AuthContext.Provider>\n}\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;EAAAC,GAAA,GAAAD,YAAA;AAEZ,SAASE,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAwB,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAgBtF,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;AAEzE,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAX,EAAA;EACxB,MAAMY,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB;AAACZ,EAAA,CANeW,OAAO;AAYvB,OAAO,SAASG,YAAYA,CAAC;EAAEC;AAA4B,CAAC,EAAE;EAAAb,GAAA;EAC5D,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAc,IAAI,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACxD,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAE1D,IAAIF,UAAU,IAAIG,WAAW,EAAE;MAC7BJ,OAAO,CAACK,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CAAC;IACjC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,KAAK,GAAIC,QAAc,IAAK;IAChCR,OAAO,CAACQ,QAAQ,CAAC;IACjBN,YAAY,CAACO,OAAO,CAAC,eAAe,EAAEJ,IAAI,CAACK,SAAS,CAACF,QAAQ,CAAC,CAAC;EACjE,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBX,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACU,UAAU,CAAC,eAAe,CAAC;IACxCV,YAAY,CAACU,UAAU,CAAC,gBAAgB,CAAC;EAC3C,CAAC;EAED,MAAMC,eAAe,GAAG,CAAC,CAACd,IAAI;EAE9B,oBAAOR,OAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,IAAI;MAAEQ,KAAK;MAAEI,MAAM;MAAEE;IAAgB,CAAE;IAAAf,QAAA,EAAEA;EAAQ;IAAAkB,QAAA,EAAAlC,YAAA;IAAAmC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AACjH;AAACjC,GAAA,CA3BeY,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}