{"ast":null,"code":"\"use client\";import _objectSpread from\"C:/Users/Rohit/Downloads/wellnest-platform/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createContext,useContext,useState,useEffect}from\"react\";import{getMedicineById}from\"../data/medicines\";import{jsx as _jsx}from\"react/jsx-runtime\";const CartContext=/*#__PURE__*/createContext(undefined);export function useCart(){const context=useContext(CartContext);if(!context){throw new Error(\"useCart must be used within a CartProvider\");}return context;}export function CartProvider(_ref){let{children}=_ref;const[cartItems,setCartItems]=useState([]);useEffect(()=>{const storedCart=localStorage.getItem(\"wellnest_cart\");if(storedCart){setCartItems(JSON.parse(storedCart));}},[]);useEffect(()=>{localStorage.setItem(\"wellnest_cart\",JSON.stringify(cartItems));},[cartItems]);const addToCart=function(medicineId){let quantity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;const medicine=getMedicineById(medicineId);if(!medicine)return;setCartItems(prevItems=>{const existingItem=prevItems.find(item=>item.id===medicineId);if(existingItem){return prevItems.map(item=>item.id===medicineId?_objectSpread(_objectSpread({},item),{},{quantity:item.quantity+quantity}):item);}else{return[...prevItems,{id:medicineId,quantity,medicine}];}});};const removeFromCart=medicineId=>{setCartItems(prevItems=>prevItems.filter(item=>item.id!==medicineId));};const updateQuantity=(medicineId,quantity)=>{if(quantity<=0){removeFromCart(medicineId);return;}setCartItems(prevItems=>prevItems.map(item=>item.id===medicineId?_objectSpread(_objectSpread({},item),{},{quantity}):item));};const clearCart=()=>{setCartItems([]);};const getTotalPrice=()=>{return cartItems.reduce((total,item)=>total+item.medicine.price*item.quantity,0);};const getTotalItems=()=>{return cartItems.reduce((total,item)=>total+item.quantity,0);};return/*#__PURE__*/_jsx(CartContext.Provider,{value:{cartItems,addToCart,removeFromCart,updateQuantity,clearCart,getTotalPrice,getTotalItems},children:children});}","map":{"version":3,"names":["_objectSpread","createContext","useContext","useState","useEffect","getMedicineById","jsx","_jsx","CartContext","undefined","useCart","context","Error","CartProvider","_ref","children","cartItems","setCartItems","storedCart","localStorage","getItem","JSON","parse","setItem","stringify","addToCart","medicineId","quantity","arguments","length","medicine","prevItems","existingItem","find","item","id","map","removeFromCart","filter","updateQuantity","clearCart","getTotalPrice","reduce","total","price","getTotalItems","Provider","value"],"sources":["C:/Users/Rohit/Downloads/wellnest-platform/client/src/contexts/CartContext.tsx"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\nimport { getMedicineById, Medicine } from \"../data/medicines\"\n\ninterface CartItem {\n  id: number\n  quantity: number\n  medicine: Medicine\n}\n\ninterface CartContextType {\n  cartItems: CartItem[]\n  addToCart: (medicineId: number, quantity?: number) => void\n  removeFromCart: (medicineId: number) => void\n  updateQuantity: (medicineId: number, quantity: number) => void\n  clearCart: () => void\n  getTotalPrice: () => number\n  getTotalItems: () => number\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined)\n\nexport function useCart() {\n  const context = useContext(CartContext)\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\")\n  }\n  return context\n}\n\ninterface CartProviderProps {\n  children: ReactNode\n}\n\nexport function CartProvider({ children }: CartProviderProps) {\n  const [cartItems, setCartItems] = useState<CartItem[]>([])\n\n  useEffect(() => {\n    const storedCart = localStorage.getItem(\"wellnest_cart\")\n    if (storedCart) {\n      setCartItems(JSON.parse(storedCart))\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"wellnest_cart\", JSON.stringify(cartItems))\n  }, [cartItems])\n\n  const addToCart = (medicineId: number, quantity = 1) => {\n    const medicine = getMedicineById(medicineId)\n    if (!medicine) return\n\n    setCartItems((prevItems) => {\n      const existingItem = prevItems.find((item) => item.id === medicineId)\n\n      if (existingItem) {\n        return prevItems.map((item) =>\n          item.id === medicineId ? { ...item, quantity: item.quantity + quantity } : item,\n        )\n      } else {\n        return [...prevItems, { id: medicineId, quantity, medicine }]\n      }\n    })\n  }\n\n  const removeFromCart = (medicineId: number) => {\n    setCartItems((prevItems) => prevItems.filter((item) => item.id !== medicineId))\n  }\n\n  const updateQuantity = (medicineId: number, quantity: number) => {\n    if (quantity <= 0) {\n      removeFromCart(medicineId)\n      return\n    }\n\n    setCartItems((prevItems) => prevItems.map((item) => (item.id === medicineId ? { ...item, quantity } : item)))\n  }\n\n  const clearCart = () => {\n    setCartItems([])\n  }\n\n  const getTotalPrice = () => {\n    return cartItems.reduce((total, item) => total + item.medicine.price * item.quantity, 0)\n  }\n\n  const getTotalItems = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0)\n  }\n\n  return (\n    <CartContext.Provider\n      value={{\n        cartItems,\n        addToCart,\n        removeFromCart,\n        updateQuantity,\n        clearCart,\n        getTotalPrice,\n        getTotalItems,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}